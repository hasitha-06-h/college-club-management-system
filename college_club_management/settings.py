"""
Django settings for college_club_management project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

"""from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-f4rrvir(%=wj!ejzx(^gfsym6qg@_e)4impz7b3qdf9imvbts2'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'college_club_management.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'college_club_management.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'"""



# college_club_management/settings.py

# college_club_management/settings.py

import os
from pathlib import Path
import dj_database_url # Import for handling Render's database URL

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- SECURITY WARNINGS: Adjust for Production ---

# SECURITY WARNING: keep the secret key used in production secret!
# On Render, you MUST set 'DJANGO_SECRET_KEY' as an environment variable.
# The second argument is a fallback for local development if the env var isn't set.
SECRET_KEY = os.environ.get('DJANGO_SECRET_KEY', 'your-very-strong-and-random-local-dev-secret-key-here')
# IMPORTANT: For actual production, replace 'your-very-strong-and-random-local-dev-secret-key-here'
# with a truly random string if you plan to use this default locally.
# On Render, the environment variable will override this.

# SECURITY WARNING: don't run with debug turned on in production!
# On Render, set 'DJANGO_DEBUG' to 'False' as an environment variable.
# THIS LINE HAS BEEN CORRECTED: It now defaults to False unless explicitly 'true'.
DEBUG = os.environ.get('DJANGO_DEBUG', 'False').lower() == 'true'

# ALLOWED_HOSTS defines the domain names and IP addresses that your Django project can serve.
# Keep 127.0.0.1 and localhost for local development.
# Render automatically sets RENDER_EXTERNAL_HOSTNAME, which will be added here.
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']

RENDER_EXTERNAL_HOSTNAME = os.environ.get('RENDER_EXTERNAL_HOSTNAME')
if RENDER_EXTERNAL_HOSTNAME:
    ALLOWED_HOSTS.append(RENDER_EXTERNAL_HOSTNAME)
# IMPORTANT: If you configure a custom domain (e.g., 'yourcustomdomain.com') on Render,
# you must also add it to this list:
# ALLOWED_HOSTS.append('yourcustomdomain.com')
# ALLOWED_HOSTS.append('www.yourcustomdomain.com')


# --- Application definition ---

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes', # REQUIRED FOR GenericForeignKey (used by Feedback app potentially)
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Your custom project applications
    'accounts.apps.AccountsConfig',
    'clubs.apps.ClubsConfig',
    'events.apps.EventsConfig',
    'announcements.apps.AnnouncementsConfig',
    'feedback.apps.FeedbackConfig', # Ensure this app is correctly named and configured
]

# IMPORTANT: Middleware processing order is crucial.
# Whitenoise must be placed directly after Django's SecurityMiddleware.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # ADDED: For serving static files in production on Render
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# The main URL configuration for your project
ROOT_URLCONF = 'college_club_management.urls'

# --- Template Configuration ---
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'], # Specifies project-level template directory
        'APP_DIRS': True, # Tells Django to look for a 'templates' directory inside each app
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

# WSGI application entry point for your web server (Gunicorn)
WSGI_APPLICATION = 'college_club_management.wsgi.application'


# --- Database Configuration ---
# Uses dj_database_url to parse the 'DATABASE_URL' environment variable from Render.
# This allows connection to a PostgreSQL database on Render.
# THIS HAS BEEN CORRECTED: Removed the SQLite fallback. Now it *requires* DATABASE_URL.
DATABASES = {
    'default': dj_database_url.config(
        default=os.environ.get('DATABASE_URL'), # Removed the SQLite fallback
        conn_max_age=600 # Optional: Controls connection lifetime for performance
    )
}


# --- Password validation rules ---
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# --- Internationalization and Localization ---
# https://docs.djangoproject.com/en/5.0/topics/i18n/
LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata' # Set to your local timezone

USE_I18N = True # Enable internationalization

USE_TZ = True # Enable timezone support


# --- Static files (CSS, JavaScript, Images) Configuration ---
# Used for collecting and serving static files in production via Whitenoise.
STATIC_URL = 'static/'
# STATIC_ROOT is the absolute path to the directory where 'collectstatic' will
# gather all static files from your apps and STATICFILES_DIRS into one place.
STATIC_ROOT = BASE_DIR / 'staticfiles'
# STATICFILES_DIRS is a list of additional locations Django will search for static files.
STATICFILES_DIRS = [
    BASE_DIR / "static", # Points to your project-level static directory (e.g., college_club_management/static)
    # Django automatically finds 'static' folders inside each app listed in INSTALLED_APPS
]

# Whitenoise storage backend for compressed and cached static files for optimal performance
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# --- Media files (user uploaded content) Configuration ---
# For local development, media files are stored locally.
# IMPORTANT: For production on Render, you should highly consider using a cloud storage
# solution like AWS S3 or Google Cloud Storage for media files. Render's filesystem
# is ephemeral, meaning uploaded files can be lost if your server restarts or scales.
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'


# --- Custom User Model & Authentication Redirects ---
AUTH_USER_MODEL = 'accounts.CustomUser' # Your custom user model
LOGIN_REDIRECT_URL = '/' # URL to redirect to after successful login
LOGOUT_REDIRECT_URL = '/' # URL to redirect to after successful logout


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- CSRF Trusted Origins for Security ---
# Add your Render domain to allow CSRF tokens from your deployed application.
# This prevents potential CSRF errors in production.
CSRF_TRUSTED_ORIGINS = ['https://*.render.com']
# Remember to add your custom domain here if you set one up, e.g.:
# CSRF_TRUSTED_ORIGINS.append('https://yourcustomdomain.com')
# CSRF_TRUSTED_ORIGINS.append('https://www.yourcustomdomain.com')